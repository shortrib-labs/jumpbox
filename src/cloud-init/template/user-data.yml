#@ load("@ytt:data", "data")
---
#cloud-config

# This is the user-data configuration file for cloud-init. By default this sets
# 
# up an initial user called "ubuntu" with password "ubuntu", which must be
# changed at first login. However, many additional actions can be initiated on
# first boot from this file. The cloud-init documentation has more details:
#
# https://cloudinit.readthedocs.io/
#
# Some additional examples are provided in comments below the default
# configuration.
fqdn: #@ "jumpbox.{}".format(data.values.domain)
ssh_authorized_keys: #@ data.values.ssh.authorized_keys

## don't require a password change since we just set it
chpasswd:
  expire: false

## add package repositories
apt:
  preserve_sources_list: true
  sources:
    hashicorp:
      source: #@ data.values.hashicorp.repository 
      key: #@ data.values.hashicorp.pgp_key
    tailscale:
      source: #@ data.values.tailscale.repository
      key: #@ data.values.tailscale.pgp_key
    github:
      source: #@ data.values.github.repository
      key: #@ data.values.github.pgp_key
    docker:
      source: #@ data.values.docker.repository
      key: #@ data.values.docker.pgp_key


## Update apt database and upgrade packages on first boot
package_update: true
package_upgrade: true

## Install additional packages on first boot
packages:
- open-vm-tools
- ca-certificates
- curl
- docker-ce
- docker-ce-rootless-extras
- zsh
- docker-ce
- podman
- xz-utils
- direnv
- neovim
- python-is-python3
- pip
- packer
- terraform
- vault
- tailscale
- gh
- fzf
- silversearcher-ag
- sipcalc
- skopeo

# install snaps on first boot
snap:
  commands:
  - snap install jq
  - snap install yq
  - snap install git-ubuntu --classic
  - snap install kubectl --classic
  - snap install helm --classic
  - snap install certbot --classic
  - snap set certbot trust-plugin-with-root=ok
  - snap install certbot-dns-google

groups:
- ssher
- docker

write_files:
- path: /etc/ssh/ssh_host_ed25519_key
  content: #@ data.values.ssh_host_key.private
  permissions: '0644'
  owner: root:root
- path: /etc/ssh/ssh_host_ed25519_key.pub
  content: #@ data.values.ssh_host_key.public
  permissions: '0644'
  owner: root:root
- path: /etc/ssh/sshd_config.d/01-hardening.conf
  content: |
    # enable eed25519 key
    HostKey /etc/ssh/ssh_host_ed25519_key

    # restrict supported key exchange, cipher, and MAC algorithms
    KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256
    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
    MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com
    HostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com

    # restrict authentication mechanism
    PasswordAuthentication yes
    ChallengeResponseAuthentication no
    PubkeyAuthentication yes
  permissions: '0644'
  owner: root:root
- path: /etc/ssh/sshd_config.d/88-gpg-forwarding.conf
  content: |
    # Enables automatic removal of stale sockets to support GPG forwarding
    StreamLocalBindUnlink yes
  permissions: '0644'
  owner: root:root
- path: /etc/ssh/ssh_config.d/01-hardening.conf
  content: |
    Host github.com
      KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
    Host *
      # restrict supported key exchange, cipher, and MAC algorithms
      KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256
      Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
      MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com
      HostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com

      # restrict authentication mechanism
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      PubkeyAuthentication yes
  permissions: '0644'
  owner: root:root

runcmd:
- curl https://kots.io/install | bash
- |
  bash -c "(
    set -x
    export KREW_ROOT=/usr/local/libexec/krew
    export PATH=${KREW_ROOT}/bin:${PATH}
    curl -L https://krew.sh | bash
    curl -L https://krew.sh/ns | bash
    curl -L https://krew.sh/ctx | bash
    curl -L https://krew.sh/preflight | bash
    curl -L https://krew.sh/support-bundle | bash
  )" 
- |
  bash -c "(
    set -x
    cd "$(mktemp -d)"
    wget -O replicated.tar.gz -q "$(curl -s https://api.github.com/repos/replicatedhq/replicated/releases/latest | yq '.assets[] | select(.browser_download_url | contains("linux_amd64")).browser_download_url')"
    tar -C /usr/local/bin -xzvf replicated.tar.gz replicated
  )"
- curl -L https://carvel.dev/install.sh | bash
- #@ "curl -H 'Accept: application/vnd.github.v3.raw' -L https://api.github.com/repos/vmware-tanzu/community-edition/contents/hack/get-tce-release.sh | bash -s {} {}".format(data.values.tanzu.version, data.values.tanzu.os)
- #@ "tar xzvf tce-linux-amd64-{}.tar.gz".format(data.values.tanzu.version)
- #@ "(cd tce-linux-amd64-{} && sudo -u ubuntu ./install.sh)".format(data.values.tanzu.version)
- rm -rf tce-linux*
- curl --output /usr/local/bin/mc -L https://dl.min.io/client/mc/release/linux-amd64/mc
- chmod 755 /usr/local/bin/mc
- curl -L https://github.com/concourse/concourse/releases/download/v7.8.2/fly-7.8.2-linux-amd64.tgz | tar -C /usr/local/bin -xzf -
- curl --output /usr/local/bin/fission -L https://github.com/fission/fission/releases/download/v1.16.0/fission-v1.16.0-linux-amd64
- chmod 755 /usr/local/bin/fission
- curl -L https://github.com/vmware-tanzu/velero/releases/download/v1.9.0/velero-v1.9.0-linux-amd64.tar.gz | tar -C /usr/local/bin --strip-components=1 -xzf - velero-v1.9.0-linux-amd64/velero
- chmod 755 /usr/local/bin/velero
- ls -1 /etc/ssh_host*
- rm /etc/ssh/ssh_host_dsa_key* /etc/ssh/ssh_host_ecdsa_key* /etc/ssh/ssh_host_rsa_key* 
- ls -1 /etc/ssh_host*
- awk '$5 >= 3071' /etc/ssh/moduli > /etc/ssh/moduli.safe
- mv /etc/ssh/moduli.safe /etc/ssh/moduli
- usermod -a -G ssher ubuntu 
- echo "# limit who can use SSH\nAllowGroups ssher" > /etc/ssh/sshd_config.d/02-limit-to-ssher.conf
- ls -l /usr/local/bin
- cp /var/log/cloud-init-output.log /root
- cp /var/log/cloud-init.log /root
