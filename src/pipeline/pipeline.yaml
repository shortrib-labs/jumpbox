
resources:
- name: source
  type: git
  icon: github
  source:
    uri: ((source.repository))
    branch: ((source.branch))
    paths:
    - "src/**"

- name: ova
  type: s3
  icon: database 
  source:
    endpoint: ((minio.fqdn))
    access_key_id: ((minio.access_key_id))
    secret_access_key: ((minio.secret_access_key))
    bucket: ((bucket))
    regexp: ((template.vm_name))-(.*).ova
   
- name: version
  type: semver
  icon: counter
  source:
    endpoint: ((minio.fqdn))
    access_key_id: ((minio.access_key_id))
    secret_access_key: ((minio.secret_access_key))
    bucket: ((bucket))
    key: ((template.vm_name)).version 

- name: repave
  type: time
  icon: timer-cog-outline
  source:
    start: 2:00 AM
    stop: 3:00 AM
    days:
    - Thursday
    - Saturday

generate-user-data: 
  config: &generate-user-data
    platform: linux
    image_resource:
      type: registry-image
      source:
        repository: registry.shortrib.dev/toolkit/toolkit
    inputs:
    - name: source
    outputs:
    - name: user-data
    params:
      OVF_NAME: ((template.vm_name))
      SSH_HOST_KEY: ((ssh_host_key))
      DOMAIN: ((domain))
      PASSWORD: ((password))
      SSH: ((ssh))
      HASHICORP_APT: ((hashicorp))
      TAILSCALE_APT: ((tailscale))
      GITHUB_CLI_APT: ((github))
      DOCKER_APT: ((docker))
      TANZU: ((tanzu))
    run:
      path: bash
      args:
      - -c
      - |
        echo "#cloud-config" > user-data/user-data.yml
        ytt --ignore-unknown-comments -f "source/src/cloud-init/template/user-data.yml" \
            --data-value domain=${DOMAIN} \
            --data-value hashed_password="$(echo ${PASSWORD} | openssl passwd -6 -salt $(openssl rand -base64 16) -stdin)" \
            --data-value-yaml ssh="${SSH}" \
            --data-value-yaml ssh_host_key="${SSH_HOST_KEY}" \
            --data-value-yaml hashicorp="${HASHICORP_APT}" \
            --data-value-yaml tailscale="${TAILSCALE_APT}" \
            --data-value-yaml github="${GITHUB_CLI_APT}" \
            --data-value-yaml docker="${DOCKER_APT}" \
            --data-value-yaml tanzu="${TANZU}" \
          >> user-data/user-data.yml

packer-params: &packer-params
  OVF_NAME: ((template.vm_name))
  SSH_PRIVATE_KEY: ((ssh_private_key))
  PKR_VAR_domain: ((domain))
  PKR_VAR_vm_name: ((template.vm_name))
  PKR_VAR_base_template: ((base_template)) 
  PKR_VAR_default_password: ((password))
  PKR_VAR_numvcpus: ((template.numvcpus))
  PKR_VAR_memsize: ((template.memsize))
  PKR_VAR_disk_size: ((template.disk_size))
  PKR_VAR_vsphere_username: ((vsphere.username)) 
  PKR_VAR_vsphere_password: ((vsphere.password)) 
  PKR_VAR_vsphere_datacenter: ((vsphere.datacenter)) 
  PKR_VAR_vsphere_cluster: ((vsphere.cluster)) 
  PKR_VAR_vsphere_server: ((vsphere.server)) 
  PKR_VAR_vsphere_network: ((vsphere.network)) 
  PKR_VAR_vsphere_datastore: ((vsphere.datastore)) 

terraform-params: &terraform-params
  PASSWORD: ((password))
  GOOGLE_CREDENTIALS: ((google-credentials))
  TF_VAR_ssh_authorized_keys: ((ssh.authorized_keys))
  TF_VAR_cpus: ((instance.cpus))
  TF_VAR_memory: ((instance.memory))
  TF_VAR_disk: ((instance.disk))
  TF_VAR_mac_address: ((instance.mac_address))
  TF_VAR_domain: ((domain))
  TF_VAR_vsphere_username: ((vsphere.username)) 
  TF_VAR_vsphere_password: ((vsphere.password)) 
  TF_VAR_vsphere_datacenter: ((vsphere.datacenter)) 
  TF_VAR_vsphere_cluster: ((vsphere.cluster)) 
  TF_VAR_vsphere_server: ((vsphere.server)) 
  TF_VAR_vsphere_network: ((vsphere.network)) 
  TF_VAR_vsphere_datastore: ((vsphere.datastore)) 
  TF_VAR_vsphere_host: ((vsphere.host))
  TF_VAR_vsphere_resource_pool: ((vsphere.resource_pool))
  TF_VAR_vsphere_folder: ((vsphere.folder))

jobs:
- name: validate-template
  plan:
  - get: source
    trigger: true
  - task: generate-user-data
    config: *generate-user-data
  - task: validate
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: registry.shortrib.dev/toolkit/toolkit
      inputs:
      - name: source
      - name: user-data
      params: *packer-params
      run:
        path: bash
        args:
        - -c
        - |
          project_root=${PWD}/source
          output_directory=${PWD}/template/${OVF_NAME}
          ssh_key=${PWD}/ssh.key

          umask 077
          echo "${SSH_PRIVATE_KEY}" > ${ssh_key}
          packer validate --var project_root=${project_root} \
              --var ssh_private_key_file=${ssh_key} \
              --var "user_data=$(cat user-data/user-data.yml)" \
              --var output_directory=${output_directory} \
            source/src/packer 
- name: create-image
  plan:
  - get: source
    trigger: true
    passed:
      - validate-template
  - get: version
    params: 
      bump: ((bump))
      pre: ((pre))
  - task: generate-user-data
    config: *generate-user-data
  - task: create-image
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: registry.shortrib.dev/toolkit/toolkit
      inputs:
      - name: source
      - name: user-data
      outputs:
      - name: template
      params: *packer-params
      run:
        path: bash
        args:
        - -c
        - |
          project_root=${PWD}/source
          output_directory=${PWD}/template/${OVF_NAME}
          ssh_key=${PWD}/ssh.key

          umask 077
          echo "${SSH_PRIVATE_KEY}" > ${ssh_key}
          packer build --var project_root=${project_root} \
              --var ssh_private_key_file=${ssh_key} \
              --var "user_data=$(cat user-data/user-data.yml)" \
              --var output_directory=${output_directory} \
            source/src/packer 
  - task: convert-to-ova
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: registry.shortrib.dev/toolkit/toolkit
      inputs:
      - name: template
      - name: source
      - name: version
      outputs:
      - name: ova
      params:
        OVF_NAME: ((template.vm_name))
      run:
        path: bash
        args:
        - -c
        - |
          root=${PWD}
          version=$(cat version/version)
          cd template/${OVF_NAME} 
          tar -cf ${root}/ova/${OVF_NAME}-${version}.ova *
  - task: delete-vm
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: registry.shortrib.dev/toolkit/toolkit
      inputs:
      - name: source
      params:
        WORKING_VM: ((template.vm_name))
        GOVC_URL: https://((vsphere.server)) 
        GOVC_USERNAME: ((vsphere.username)) 
        GOVC_PASSWORD: ((vsphere.password)) 
      run:
        path: bash
        args:
        - -c
        - | 
          govc vm.destroy ${WORKING_VM}
  - put: ova
    params:
      file: ova/((template.vm_name))-*.ova
  - put: version
    params: 
      file: version/version

- name: plan-instance
  plan:
  - get: source
    trigger: true
    passed:
    - create-image
  - get: ova
    trigger: true
    passed:
    - create-image 
  - get: version
    trigger: true
    passed:
    - create-image 
  - task: plan-instance
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: registry.shortrib.dev/toolkit/toolkit
      inputs:
      - name: source
      - name: ova
      - name: version
      outputs:
      - name: template
      params: *terraform-params
      run:
        path: bash
        args:
        - -c
        - |
          version=$(cat version/version)
          project_root=${PWD}/source 
          ova_path=${PWD}/ova/((template.vm_name))-${version}.ova 
          hashed_password="$(echo ${PASSWORD} | openssl passwd -6 -salt $(openssl rand -base64 16) -stdin)"

          terraform -chdir=${project_root}/src/terraform init 
          terraform -chdir=${project_root}/src/terraform plan --var project_root=${project_root} \
            --var ovf_path=${ova_path} --var hashed_password=${hashed_password}

- name: deploy-instance
  plan:
  - get: source
    passed:
    - plan-instance
  - get: ova
    passed:
    - plan-instance 
  - get: version
    passed:
    - plan-instance 
  - get: repave
    trigger: true
  - task: deploy-instance
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: registry.shortrib.dev/toolkit/toolkit
      inputs:
      - name: source
      - name: ova
      - name: version
      outputs:
      - name: template
      params: *terraform-params
      run:
        path: bash
        args:
        - -c
        - |
          version=$(cat version/version)
          project_root=${PWD}/source 
          ova_path=${PWD}/ova/((template.vm_name))-${version}.ova 
          hashed_password="$(echo ${PASSWORD} | openssl passwd -6 -salt $(openssl rand -base64 16) -stdin)"

          terraform -chdir=${project_root}/src/terraform init  
          terraform -chdir=${project_root}/src/terraform apply --var project_root=${project_root} \
            --var ovf_path=${ova_path} --var hashed_password=${hashed_password} --auto-approve=true
